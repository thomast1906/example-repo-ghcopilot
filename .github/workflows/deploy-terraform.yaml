name: Deploy Azure Infrastructure with Terraform

on:
  push:
    branches: [ main ]
    paths:
      - 'terraform/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

permissions:
  id-token: write   # Required for OIDC
  contents: read    # Required for checkout

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
      
    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: '1.3.0'
        
    # Azure login with OIDC
    - name: Azure login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        
    # Set up Python for the Azure App Service deployment script
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    # Terraform Init
    - name: Terraform Init
      run: |
        cd terraform/environments/${{ github.event.inputs.environment || 'dev' }}
        terraform init \
          -backend-config="resource_group_name=${{ secrets.TERRAFORM_STORAGE_RG }}" \
          -backend-config="storage_account_name=${{ secrets.TERRAFORM_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=${{ secrets.TERRAFORM_CONTAINER }}" \
          -backend-config="key=flask-app-${{ github.event.inputs.environment || 'dev' }}.tfstate"
      
    # Terraform Validation
    - name: Terraform Validate
      run: |
        cd terraform/environments/${{ github.event.inputs.environment || 'dev' }}
        terraform validate -no-color
        
    # Terraform Plan
    - name: Terraform Plan
      if: github.event_name == 'pull_request'
      run: |
        cd terraform/environments/${{ github.event.inputs.environment || 'dev' }}
        terraform plan -no-color
      continue-on-error: true
        
    # Terraform Apply (only on push to main or manual trigger)
    - name: Terraform Apply
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      run: |
        cd terraform/environments/${{ github.event.inputs.environment || 'dev' }}
        terraform apply -auto-approve
        
    # Deploy App to Azure App Service
    - name: Deploy App to Azure App Service
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      run: |
        cd terraform/environments/${{ github.event.inputs.environment || 'dev' }}
        APP_SERVICE_NAME=$(terraform output -raw app_service_name)
        
        # Create a deployment package
        mkdir -p /tmp/deploy
        cp -R ${{ github.workspace }}/app/* /tmp/deploy/
        cd /tmp/deploy
        
        # Zip the app code
        zip -r app.zip .
        
        # Deploy to App Service
        az webapp deployment source config-zip \
          --resource-group $(terraform output -raw resource_group_name) \
          --name $APP_SERVICE_NAME \
          --src app.zip